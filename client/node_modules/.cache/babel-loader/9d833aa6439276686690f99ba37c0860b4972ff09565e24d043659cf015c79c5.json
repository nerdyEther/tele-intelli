{"ast":null,"code":"var _jsxFileName = \"/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the AuthContext\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n\n// AuthProvider component to wrap around the app\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // Check for token in local storage on initial load\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setUser({\n        token: storedToken\n      }); // Set user state if token exists\n    }\n  }, []);\n\n  // Function to log out the user\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token'); // Remove token from local storage\n  };\n\n  // Context value contains user and setUser\n  const value = {\n    user,\n    setUser,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","storedToken","localStorage","getItem","token","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the AuthContext\nconst AuthContext = createContext();\n\n// Custom hook to use the AuthContext\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// AuthProvider component to wrap around the app\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n\n  // Check for token in local storage on initial load\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setUser({ token: storedToken }); // Set user state if token exists\n    }\n  }, []);\n\n  // Function to log out the user\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token'); // Remove token from local storage\n  };\n\n  // Context value contains user and setUser\n  const value = {\n    user,\n    setUser,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC;;AAEA;AAAAE,EAAA,CAJgBD,OAAO;AAKvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACfD,OAAO,CAAC;QAAEI,KAAK,EAAEH;MAAY,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBL,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,KAAK,GAAG;IACZR,IAAI;IACJC,OAAO;IACPK;EACF,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAV,QAAA,EAChCA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACd,GAAA,CA7BeF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}