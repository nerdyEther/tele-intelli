{"ast":null,"code":"var _jsxFileName = \"/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create a context for authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Initialize user state\n\n  const login = userData => {\n    setUser(userData); // Set the user data upon login\n  };\n  const logout = () => {\n    setUser(null); // Clear user data upon logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a custom hook to use the AuthContext\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","login","userData","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Create a context for authentication\nconst AuthContext = createContext();\n\n// Create a provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Initialize user state\n\n  const login = (userData) => {\n    setUser(userData); // Set the user data upon login\n  };\n\n  const logout = () => {\n    setUser(null); // Clear user data upon logout\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Create a custom hook to use the AuthContext\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC,MAAMS,KAAK,GAAIC,QAAQ,IAAK;IAC1BF,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,IAAI;MAAEE,KAAK;MAAEE;IAAO,CAAE;IAAAN,QAAA,EAClDA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAX,EAAA,CAlBaF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAmBzB,OAAO,MAAMe,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOrB,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACiB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}