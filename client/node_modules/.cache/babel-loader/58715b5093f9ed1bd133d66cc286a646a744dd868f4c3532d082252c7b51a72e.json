{"ast":null,"code":"var _jsxFileName = \"/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/KeywordChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeywordChart = ({\n  groupId,\n  userId\n}) => {\n  _s();\n  // Now accepting both groupId and userId as props\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchKeywordData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:7777/groups${groupId}/keyword-data`, {\n          params: {\n            userId\n          }\n        });\n        const data = response.data;\n\n        // Assuming backend returns a list of keywords and counts\n        const labels = data.map(item => item.keyword);\n        const usageCounts = data.map(item => item.count);\n        setChartData({\n          labels,\n          datasets: [{\n            label: 'Keyword Usage',\n            data: usageCounts,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)'\n          }]\n        });\n      } catch (error) {\n        console.error('Error fetching keyword data:', error);\n      }\n    };\n    if (groupId && userId) {\n      fetchKeywordData(); // Fetch data only if both groupId and userId are available\n    }\n  }, [groupId, userId]);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Keyword Usage Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(KeywordChart, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = KeywordChart;\nexport default KeywordChart;\nvar _c;\n$RefreshReg$(_c, \"KeywordChart\");","map":{"version":3,"names":["React","useEffect","useState","Bar","axios","jsxDEV","_jsxDEV","KeywordChart","groupId","userId","_s","chartData","setChartData","fetchKeywordData","response","get","params","data","labels","map","item","keyword","usageCounts","count","datasets","label","backgroundColor","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/KeywordChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\n\nconst KeywordChart = ({ groupId, userId }) => {  // Now accepting both groupId and userId as props\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const fetchKeywordData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:7777/groups${groupId}/keyword-data`, {\n          params: { userId }\n        });\n        const data = response.data;\n\n        // Assuming backend returns a list of keywords and counts\n        const labels = data.map(item => item.keyword);\n        const usageCounts = data.map(item => item.count);\n\n        setChartData({\n          labels,\n          datasets: [{\n            label: 'Keyword Usage',\n            data: usageCounts,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)'\n          }]\n        });\n      } catch (error) {\n        console.error('Error fetching keyword data:', error);\n      }\n    };\n\n    if (groupId && userId) {\n      fetchKeywordData();  // Fetch data only if both groupId and userId are available\n    }\n  }, [groupId, userId]);\n\n  if (!chartData) return <p>Loading chart...</p>;\n\n  return (\n    <div>\n      <h3 className=\"text-xl font-semibold mb-4\">Keyword Usage Chart</h3>\n      <Bar data={chartData} />\n    </div>\n  );\n};\n\nexport default KeywordChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAAG;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,+BAA+BP,OAAO,eAAe,EAAE;UACtFQ,MAAM,EAAE;YAAEP;UAAO;QACnB,CAAC,CAAC;QACF,MAAMQ,IAAI,GAAGH,QAAQ,CAACG,IAAI;;QAE1B;QACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC;QAC7C,MAAMC,WAAW,GAAGL,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,KAAK,CAAC;QAEhDX,YAAY,CAAC;UACXM,MAAM;UACNM,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,eAAe;YACtBR,IAAI,EAAEK,WAAW;YACjBI,eAAe,EAAE;UACnB,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAED,IAAInB,OAAO,IAAIC,MAAM,EAAE;MACrBI,gBAAgB,CAAC,CAAC,CAAC,CAAE;IACvB;EACF,CAAC,EAAE,CAACL,OAAO,EAAEC,MAAM,CAAC,CAAC;EAErB,IAAI,CAACE,SAAS,EAAE,oBAAOL,OAAA;IAAAuB,QAAA,EAAG;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE9C,oBACE3B,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAI4B,SAAS,EAAC,4BAA4B;MAAAL,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnE3B,OAAA,CAACH,GAAG;MAACc,IAAI,EAAEN;IAAU;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACvB,EAAA,CAzCIH,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}