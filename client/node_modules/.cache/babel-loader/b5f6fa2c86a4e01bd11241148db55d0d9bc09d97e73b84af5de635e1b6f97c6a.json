{"ast":null,"code":"var _jsxFileName = \"/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/KeywordChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the components that are required\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst KeywordChart = ({\n  groupId,\n  userId\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchKeywordData = async () => {\n      setLoading(true);\n      setError(null); // Reset error state\n\n      try {\n        const response = await axios.get(`http://localhost:7777/keywordchart`, {\n          params: {\n            userId,\n            groupId\n          }\n        });\n        const data = response.data;\n        if (data.length === 0) {\n          console.warn(\"No keyword data returned.\");\n        }\n        const labels = data.map(item => item.keyword);\n        const usageCounts = data.map(item => item.count);\n        setChartData({\n          labels,\n          datasets: [{\n            label: 'Keyword Usage',\n            data: usageCounts,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)'\n          }]\n        });\n      } catch (err) {\n        console.error(\"Error fetching keyword data:\", err);\n        setError(\"Failed to load keyword data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Fetch keyword data when groupId or userId changes\n    if (groupId && userId) {\n      fetchKeywordData();\n    }\n  }, [groupId, userId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 21\n  }, this);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No data available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Keyword Usage Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(KeywordChart, \"/N1FfhlAfE3Gd6aiX9egY6Yx4fM=\");\n_c = KeywordChart;\nexport default KeywordChart;\nvar _c;\n$RefreshReg$(_c, \"KeywordChart\");","map":{"version":3,"names":["React","useEffect","useState","Bar","axios","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","KeywordChart","groupId","userId","_s","chartData","setChartData","loading","setLoading","error","setError","fetchKeywordData","response","get","params","data","length","console","warn","labels","map","item","keyword","usageCounts","count","datasets","label","backgroundColor","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/neelansh/PROJECTS/tele_intelli/tele-intelli/client/src/components/KeywordChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\n// Register the components that are required\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst KeywordChart = ({ groupId, userId }) => {\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchKeywordData = async () => {\n      setLoading(true);\n      setError(null); // Reset error state\n\n      try {\n        const response = await axios.get(`http://localhost:7777/keywordchart`, {\n          params: { userId, groupId },\n        });\n        const data = response.data;\n\n        if (data.length === 0) {\n          console.warn(\"No keyword data returned.\");\n        }\n\n        const labels = data.map(item => item.keyword);\n        const usageCounts = data.map(item => item.count);\n        \n        setChartData({\n          labels,\n          datasets: [{\n            label: 'Keyword Usage',\n            data: usageCounts,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          }],\n        });\n      } catch (err) {\n        console.error(\"Error fetching keyword data:\", err);\n        setError(\"Failed to load keyword data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Fetch keyword data when groupId or userId changes\n    if (groupId && userId) {\n      fetchKeywordData();\n    }\n  }, [groupId, userId]);\n\n  if (loading) return <p>Loading chart...</p>;\n  if (error) return <p>{error}</p>;\n  if (!chartData) return <p>No data available.</p>;\n\n  return (\n    <div>\n      <h3 className=\"text-xl font-semibold mb-4\">Keyword Usage Chart</h3>\n      <Bar data={chartData} />\n    </div>\n  );\n};\n\nexport default KeywordChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}